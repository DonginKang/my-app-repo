# ci-pipeline.yaml 파일

# ... (name: 과 on: 부분은 그대로 둡니다)

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
    - name: 1. Checkout App Repository
      uses: actions/checkout@v4

    - name: 2. Login to GitHub Container Registry (GHCR)
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # 3단계: 이미지 이름 및 태그 생성 (소문자 변환)
    - name: 3. Generate Image Info
      id: image-info
      run: |
        # github.repository 값을 모두 소문자로 변환합니다.
        IMAGE_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
        echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_OUTPUT
        echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_OUTPUT

    # 4단계: Docker 이미지 빌드 및 GHCR로 푸시
    - name: 4. Build and Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ghcr.io/${{ steps.image-info.outputs.IMAGE_NAME }}:${{ steps.image-info.outputs.IMAGE_TAG }}

    # 5단계: 설정을 담은 my-config-repo 체크아웃
    - name: 5. Checkout Config Repository
      uses: actions/checkout@v4
      with:
        repository: <내 GitHub ID>/my-config-repo # 👈 이 부분은 자신의 config-repo 주소로 유지
        token: ${{ secrets.PAT }}

    # 6단계: 쿠버네티스 매니페스트의 이미지 태그 업데이트
    - name: 6. Update Kubernetes Manifest
      run: |
        sed -i "s|image:.*|image: ghcr.io/${{ steps.image-info.outputs.IMAGE_NAME }}:${{ steps.image-info.outputs.IMAGE_TAG }}|g" deployment.yaml
        
    # 7단계: 변경된 매니페스트를 config-repo에 커밋 및 푸시
    - name: 7. Commit and Push to Config Repository
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git add deployment.yaml
        git commit -m "Update image to ${{ steps.image-info.outputs.IMAGE_TAG }}"
        git push
